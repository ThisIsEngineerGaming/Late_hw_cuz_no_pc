#include <iostream>
#include <windows.h>
#include <algorithm>
using namespace std;

class Array {
 unsigned int capacity = 10;
 int* data = new int[capacity];
 unsigned int length = 0;

public:
 Array() {}

 void AddToBack(int value) {
  if (length < capacity) {
   data[length] = value;
  }
  else {
   capacity *= 2;
   int* temp = new int[capacity];
   copy(data, data + length, temp);
   temp[length] = value;
   delete[] data;
   data = temp;
  }
  length++;
 }

 void RemoveAt(int index) {
  if (index < 0 || index >= length) return;
  for (int i = index + 1; i < length; i++) {
   data[i - 1] = data[i];
  }
  length--;
 }

 int& operator[](int index) {
  return data[index];
 }

 const int& operator[](int index) const {
  return data[index];
 }

 unsigned int GetLength() const {
  return length;
 }

 bool IsEmpty() const {
  return length == 0;
 }

 void Clear() {
  length = 0;
 }

 void Print() const {
  cout << "---------------------------------------\n";
  for (int i = 0; i < length; i++)
   cout << data[i] << "  ";
  cout << "\n---------------------------------------\n";
 }

 ~Array() {
  if (data != nullptr) delete[] data;
 }
};

class PriorityArr {
 Array storage;
 unsigned int max_count;

public:
 PriorityArr(unsigned int max_count) {
  this->max_count = max_count;
 }

 bool IsEmpty() const {
  return storage.IsEmpty();
 }

 bool IsFull() const {
  return storage.GetLength() == max_count;
 }

 int GetCount() const {
  return storage.GetLength();
 }

 void Add(int value) {
  if (!IsFull())
   storage.AddToBack(value);
 }

 int Remove() {
  if (!IsEmpty()) {
   int first = storage[0];
   storage.RemoveAt(0);
   return first;
  }
  else {
   throw "Queue is empty!";
  }
 }

 void Clear() {
  storage.Clear();
 }

 void Print() const {
  storage.Print();
 }
};

int main() {
 SetConsoleOutputCP(1251);
 srand(time(0));

 PriorityArr q(25);

 for (int i = 0; i < 5; i++)
  q.Add(rand() % 90 + 10);

 q.Print();

 q.Remove();

 q.Print();

 for (int i = 0; i < 2; i++)
  q.Add(rand() % 90 + 10);

 q.Print();

 for (int i = 0; i < 3; i++)
  q.Remove();

 q.Print();
}
